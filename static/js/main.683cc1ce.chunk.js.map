{"version":3,"sources":["ceramic.ts","idx.ts","wallet.ts","app.ts","components/NavBar.tsx","utils.ts","themes/theme.ts","components/CustomEditor.tsx","components/StatusPill.tsx","pages/Inspect.tsx","containers/MyApp.tsx","index.tsx"],"names":["a","ceramic","Ceramic","process","window","Promise","resolve","createIDX","idx","IDX","threeID","ThreeIdConnect","web3Modal","Web3Modal","network","cacheProvider","providerOptions","portis","package","Portis","options","id","getProvider","connect","ethProvider","enable","addresses","authProvider","EthereumAuthProvider","getDidProvider","ceramicPromise","createCeramic","authenticate","all","provider","setDIDProvider","console","log","did","NavBar","props","image","history","useHistory","documentID","useParams","AppBar","position","Toolbar","Grid","alignItems","container","item","sm","direction","src","alt","height","Typography","style","flexGrow","marginLeft","justify","xs","Paper","background","padding","width","elevation","InputBase","inputProps","spellCheck","value","fullWidth","placeholder","onChange","event","toRoute","target","push","authenticated","Button","startIcon","connecting","CircularProgress","variant","undefined","onClick","textTransform","profile","original","Avatar","replace","href","name","length","slice","emoji","Tooltip","title","IconButton","onDarkModeToggle","darkMode","lightTheme","createMuiTheme","MuiAppBar","MuiCard","overrides","MuiToolbar","root","MuiTypography","color","grey","colorTextSecondary","colorTextPrimary","palette","secondary","main","default","darkTheme","type","text","paper","MuiTable","CustomEditor","useState","editor","setEditor","useEffect","modelUriString","Math","random","modelUri","monaco","parse","model","createModel","setModel","addDiagnostics","toString","schema","e","defaultValue","editorDidMount","language","scrollbar","verticalHasArrows","horizontalHasArrows","vertical","horizontal","verticalScrollbarSize","horizontalScrollbarSize","arrowSize","useShadows","minimap","enabled","automaticLayout","showFoldingControls","peekWidgetDefaultFocus","scrollBeyondLastLine","lineNumbers","fixedOverflowWidgets","editorOptions","StatusPill","textAlign","margin","borderRadius","marginRight","yellow","paddingRight","paddingLeft","children","commitsToJSON","commits","map","commit","cid","DoctypeUtils","serializeCommit","anchorStatusMap","0","1","2","3","4","anchorStatusMapToColor","green","red","stateToJSON","state","serialized","serializeState","anchorStatus","Inspect","useDarkMode","loading","setLoading","currentDocID","setCurrentDocID","currentDocument","setCurrentDocument","currentDocumentStateJSON","setCurrentDocumentStateJSON","currentSchema","setCurrentSchema","currentSchemaStateJSON","setCurrentSchemaStateJSON","currentSchemaDocID","setCurrentSchemaDocID","currentCommits","setCurrentCommits","selectedSchemaCommit","setSelectedSchemaCommit","selectedCommit","setSelectedCommit","documentEditor","setDocumentEditor","schemaEditor","setSchemaEditor","dirtyJSON","setDirtyJSON","mosaicValue","setMosaicValue","handleSchemaDocIDChange","val","schemaDocID","loadDocument","d","baseID","handleVersionChange","commitCID","docID","DocID","fromString","newDocID","fromOther","setValue","JSON","stringify","next","content","metadata","handleSchemaCommitChange","handleSave","confirm","schemaDocIDLockedToCommit","createDocument","controllers","newDocument","alert","message","update","change","shouldShowSave","includes","currentDocSchema","currentDocSchemaDocID","currentSchemaDocIDLockedToCommit","equals","isSelectedCommit","selected","ELEMENT_MAP","path","document","toolbarControls","size","marginTop","fontSize","DEFAULT_CONTROLS_WITHOUT_CREATION","readOnly","versions","List","overflow","reverse","index","ListItem","button","ListItemText","schemaPicker","ev","updateCommitList","selectLatest","loadDocumentCommits","l","docid","populateCurrentCommits","force","getValue","commitId","schemaContentStr","useInterval","currentLogs","reduce","newL","indexOf","className","classNames","Classes","DARK","renderTile","v","initialValue","first","second","splitPercentage","MyApp","theme","setAuthenticated","setConnecting","setProfile","handleClick","then","get","catch","setTheme","CssBaseline","toggle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.683cc1ce.chunk.js","sourcesContent":["import type { CeramicApi } from '@ceramicnetwork/common'\nimport Ceramic from '@ceramicnetwork/http-client'\n\ndeclare global {\n  interface Window {\n    ceramic?: CeramicApi\n  }\n}\n\nexport async function createCeramic(): Promise<CeramicApi> {\n  const ceramic = new Ceramic(process.env.REACT_APP_CERAMIC_API);\n  window.ceramic = ceramic\n  return Promise.resolve(ceramic as CeramicApi)\n}\n","import type { CeramicApi } from '@ceramicnetwork/common'\nimport { IDX } from '@ceramicstudio/idx'\n\ndeclare global {\n  interface Window {\n    idx?: IDX\n  }\n}\n\nexport function createIDX(ceramic: CeramicApi): IDX {\n  const idx = new IDX({ ceramic })\n  window.idx = idx\n  return idx\n}\n","// import WalletConnectProvider from '@walletconnect/web3-provider'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\n// import Authereum from 'authereum'\nimport type { DIDProvider } from \"dids\"\nimport Web3Modal from \"web3modal\"\nimport Portis from \"@portis/web3\";\n\nexport const threeID = new ThreeIdConnect(process.env.REACT_APP_THREEID_API)\n\nexport const web3Modal = new Web3Modal({\n  network: \"mainnet\",\n  cacheProvider: true,\n  providerOptions: {\n    portis: {\n      package: Portis,\n      options: {\n        id: \"79aa26b1-16cd-4462-9dd9-49ace9c216e3\"\n      }\n    },\n  },\n})\n\nexport async function getProvider(): Promise<DIDProvider> {\n  const ethProvider = await web3Modal.connect()\n  const addresses = await ethProvider.enable();\n  const authProvider = new EthereumAuthProvider(ethProvider, addresses[0]);\n  await threeID.connect(authProvider);\n  return threeID.getDidProvider();\n}\n","import type { DID } from 'dids'\n\nimport { createCeramic } from './ceramic'\nimport { createIDX } from './idx'\nimport { getProvider } from './wallet'\n\ndeclare global {\n  interface Window {\n    did?: DID\n  }\n}\n\nconst ceramicPromise = createCeramic();\n\nexport const authenticate = async (): Promise<string> => {\n  const [ceramic, provider] = await Promise.all([ceramicPromise, getProvider()])\n  try {\n    await ceramic.setDIDProvider(provider)\n  } catch (error) {\n    console.log(\"ER\", error);\n  }\n  const idx = createIDX(ceramic)\n  window.did = ceramic.did\n  return idx.id\n}\n","import React from \"react\";\nimport { AppBar, Button, Grid, IconButton, InputBase, Paper, Toolbar, Tooltip, Typography, Avatar, CircularProgress } from \"@material-ui/core\";\nimport type { ImageMetadata } from '@ceramicstudio/idx-constants'\n\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport { formatDID } from \"../utils\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst IPFS_PREFIX = 'ipfs://'\n\nexport function toImageSrc(image: ImageMetadata): string {\n  return image.src.replace(IPFS_PREFIX, process.env.REACT_APP_IPFS_URL || \"\");\n}\n\ninterface IProps {\n  authenticated: boolean;\n  connecting: boolean;\n  onDarkModeToggle: () => void;\n  darkMode: boolean;\n  onClick: () => void;\n  inputText?: string;\n  profile: any;\n}\n\nconst NavBar: React.FC<IProps> = (props) => {\n  const history = useHistory();\n  const { documentID } = useParams();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Grid alignItems=\"center\" container>\n          <Grid item sm={2} direction=\"row\" container>\n            <Grid>\n              <img src=\"/images/documint_logo1.png\" alt=\"ceramic\" height=\"24\" />\n            </Grid>\n            <Grid>\n              <Typography style={{ flexGrow: 1,  marginLeft: \"10px\" }}>\n                Documint\n               </Typography>\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" alignItems=\"center\" item xs={7} >\n            <Paper style={{\n              background: \"rgba(0, 0, 0, 0.2)\",\n              padding: \"0px 10px 0px 10px\",\n              width: \"100%\",\n            }} elevation={0}>\n              <InputBase inputProps={{ spellCheck: false }} value={documentID || \"\"} fullWidth placeholder=\"Enter a Document ID\" onChange={(event) => {\n                let toRoute = \"/\";\n                if (event.target.value) {\n                  toRoute += event.target.value;\n                }\n                history.push(toRoute);\n              }} />\n            </Paper>\n          </Grid>\n          <Grid item xs={3} container justify=\"flex-end\" alignItems=\"center\">\n            {!props.authenticated && <Button startIcon={props.connecting ? <CircularProgress variant=\"indeterminate\"/> : undefined} onClick={props.onClick} variant=\"outlined\">Connect</Button>}\n            {props.authenticated && <Button style={{ textTransform: \"none\" }} startIcon={props.profile && props.profile.image && props.profile.image.original && <Avatar src={toImageSrc(props.profile.image.original)} />} variant=\"outlined\" target=\"_blank\" href=\"https://self-id.vercel.app/\">{(props.profile && props.profile.name) || (window.idx && formatDID(window.idx.id))}&nbsp;{props.profile && props.profile.emoji}</Button>}\n            <Tooltip title=\"Toggle Dark Mode\">\n              <IconButton onClick={props.onDarkModeToggle}>\n                {props.darkMode ? <Brightness3Icon /> : <WbSunnyIcon />}\n              </IconButton>\n            </Tooltip>\n          </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default NavBar;\n","export function formatDID(did: string): string {\n  return did.length <= 20 ? did : `${did.slice(0, 10)}...${did.slice(-6, -1)}`\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const lightTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  overrides: {\n    MuiToolbar: {\n      root: {\n        background: \"#fff\",\n      },\n    },\n    MuiTypography: {\n      root: {\n        color: grey[900]\n      },\n      colorTextSecondary: {\n      },\n      colorTextPrimary: {\n      }\n    },\n  },\n  palette: {\n    secondary: {\n      main: \"#ff3600\",\n    },\n    background: {\n      default: \"#fff\",\n    },\n  },\n});\n\nexport const darkTheme = createMuiTheme({\n  props: {\n    MuiAppBar: {\n    },\n    MuiCard: {\n      elevation: 0,\n    },\n  },\n  palette: {\n    type: \"dark\",\n    text: {\n      secondary: grey[500]\n    },\n    secondary: {\n      main: \"#ffb08a\",\n    },\n    background: {\n      default: grey[900],\n      paper: grey[800],\n    },\n  },\n  overrides: {\n    MuiToolbar: {\n      root: {\n        background: \"#293742\",\n      },\n    },\n    MuiTable: {\n      root: {\n      },\n    },\n    MuiTypography: {\n      root: {\n      },\n    },\n  },\n});\nconst theme = {\n  darkTheme,\n  lightTheme,\n}\n\nexport default theme;\n","import React, { useEffect, useState } from \"react\";\nimport { addDiagnostics } from \"@etclabscore/monaco-add-json-schema-diagnostics\";\nimport MonacoEditor from \"react-monaco-editor\";\nimport * as monaco from \"monaco-editor\";\n\ninterface IProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: any;\n  schema?: any;\n  editorDidMount?: any;\n  editorOptions?: any;\n  readOnly?: boolean;\n}\n\nconst CustomEditor: React.FC<IProps> = (props) => {\n  const [editor, setEditor] = useState<any>();\n  useEffect(() => {\n    if (editor !== undefined) {\n      const modelUriString = `inmemory://json-${Math.random()}.json`;\n      const modelUri = monaco.Uri.parse(modelUriString);\n      try {\n        const model = monaco.editor.createModel(props.value || \"\", \"json\", modelUri);\n        editor.setModel(model);\n        if (modelUri) {\n          addDiagnostics(modelUri.toString(), props.schema || true, monaco);\n        }\n      } catch (e) {\n        // do nothing\n      }\n    }\n  }, [props.schema, editor, props.value]);\n\n  return (\n    <MonacoEditor\n      height=\"100%\"\n      defaultValue={props.value || \"\"}\n      onChange={props.onChange}\n      editorDidMount={(editor: any, monaco: any) => {\n        setEditor(editor);\n        if (props.editorDidMount) {\n          props.editorDidMount(editor, monaco)\n        }\n      }}\n      language=\"json\"\n      options={{\n        scrollbar: {\n          // Render vertical arrows. Defaults to false.\n          verticalHasArrows: true,\n          // Render horizontal arrows. Defaults to false.\n          horizontalHasArrows: true,\n          // Render vertical scrollbar.\n          // Accepted values: 'auto', 'visible', 'hidden'.\n          // Defaults to 'auto'\n          vertical: \"visible\",\n          // Render horizontal scrollbar.\n          // Accepted values: 'auto', 'visible', 'hidden'.\n          // Defaults to 'auto'\n          horizontal: \"visible\",\n          verticalScrollbarSize: 17,\n          horizontalScrollbarSize: 17,\n          arrowSize: 30,\n          useShadows: false,\n        },\n        minimap: {\n          enabled: false,\n        },\n        automaticLayout: true,\n        showFoldingControls: \"always\",\n        peekWidgetDefaultFocus: \"editor\",\n        scrollBeyondLastLine: false,\n        lineNumbers: \"off\",\n        fixedOverflowWidgets: true,\n        ...props.editorOptions\n      }}\n    />\n  );\n};\n\nexport default CustomEditor;\n","import React from \"react\";\nimport { yellow } from \"@material-ui/core/colors\";\nimport { Typography, Tooltip } from \"@material-ui/core\";\n\n\ninterface IProps {\n  style?: React.CSSProperties\n  title: string;\n}\n\nconst StatusPill: React.FC<IProps> = (props) => {\n  return (\n    <Tooltip title={props.title} style={{ textAlign: \"center\" }}>\n      <span style={{ margin: \"2px\", borderRadius: \"3px\", height: \"26px\", marginRight: \"5px\", background: yellow[900], ...props.style }}>\n        <Typography style={{ padding: \"2px\", paddingRight: \"5px\", paddingLeft: \"5px\" }}>\n          {props.children}\n        </Typography>\n      </span>\n    </Tooltip>\n  );\n};\n\nexport default StatusPill;\n","import React, { useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport useDarkMode from \"use-dark-mode\";\nimport { Mosaic, MosaicBranch, MosaicWindow, DEFAULT_CONTROLS_WITHOUT_CREATION } from \"react-mosaic-component\";\nimport DocID from \"@ceramicnetwork/docid\";\nimport CustomEditor from '../components/CustomEditor';\nimport { DocState, DoctypeUtils, Doctype } from '@ceramicnetwork/common';\nimport { InputBase, Button, List, ListItem, ListItemText, Typography, Tooltip, CircularProgress, Paper } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport Save from \"@material-ui/icons/Save\"\nimport { useParams, useHistory } from \"react-router-dom\";\nimport useInterval from \"use-interval\";\nimport StatusPill from \"../components/StatusPill\";\nimport { grey, green, yellow, red } from \"@material-ui/core/colors\";\nexport type ViewId = \"schema\" | \"document\" | \"state\" | \"commits\" | \"new\";\n\ninterface IProps {\n  authenticated: boolean;\n}\n\nconst commitsToJSON = (commits: any[]) => {\n  return commits.map((commit) => {\n    return {\n      cid: commit.cid,\n      value: DoctypeUtils.serializeCommit(commit.value)\n    }\n  });\n}\n\nconst anchorStatusMap: Record<string, string> = {\n  0: \"NOT_REQUESTED\",\n  1: \"PENDING\",\n  2: \"PROCESSING\",\n  3: \"ANCHORED\",\n  4: \"FAILED\"\n}\nconst anchorStatusMapToColor: Record<string, string> = {\n  \"NOT_REQUESTED\": grey[500],\n  \"PENDING\": yellow[800],\n  \"PROCESSING\": yellow[900],\n  \"ANCHORED\": green[500],\n  \"FAILED\": red[500]\n}\n\nconst stateToJSON = (state: DocState | undefined) => {\n  if (!state) {\n    return;\n  }\n  const serialized = DoctypeUtils.serializeState(state);\n  serialized.anchorStatus = anchorStatusMap[serialized.anchorStatus] || serialized.anchorStatus;\n  return serialized\n}\nconst Inspect: React.FC<IProps> = (props) => {\n  const { documentID } = useParams();\n  const history = useHistory();\n\n  const darkMode = useDarkMode();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [currentDocID, setCurrentDocID] = useState<string | undefined>();\n  const [currentDocument, setCurrentDocument] = useState<Doctype | undefined>();\n  const [currentDocumentStateJSON, setCurrentDocumentStateJSON] = useState<any>();\n  const [currentSchema, setCurrentSchema] = useState<any | undefined>();\n  const [currentSchemaStateJSON, setCurrentSchemaStateJSON] = useState<any | undefined>();\n  const [currentSchemaDocID, setCurrentSchemaDocID] = useState<DocID | undefined>();\n  const [currentCommits, setCurrentCommits] = useState<Record<string, any>[] | undefined>();\n  const [selectedSchemaCommit, setSelectedSchemaCommit] = useState<any | undefined>();\n  const [selectedCommit, setSelectedCommit] = useState<any>();\n  const [documentEditor, setDocumentEditor] = useState<any>();\n  const [schemaEditor, setSchemaEditor] = useState<any>();\n  const [dirtyJSON, setDirtyJSON] = useState();\n  const [mosaicValue, setMosaicValue] = useState<any>();\n\n  const handleSchemaDocIDChange = async (val: string) => {\n    const schemaDocID = val.replace(\"ceramic://\", \"\");\n    if (val === \"\") {\n      setCurrentSchemaDocID(undefined);\n      setSelectedSchemaCommit(undefined);\n      setCurrentSchema(undefined);\n      setCurrentSchemaStateJSON(undefined);\n      return;\n    }\n\n    let d: Doctype | undefined;\n    try {\n      d = await window.ceramic?.loadDocument(schemaDocID);\n    } catch (e) {\n      // dont error on bad doc ids\n    }\n    if (d) {\n      setCurrentSchemaDocID(d.id.baseID);\n      setSelectedSchemaCommit(d.state.log[d.state.log.length - 1]);\n      setCurrentSchema(d);\n      setCurrentSchemaStateJSON(stateToJSON(d.state));\n    }\n  };\n\n  const handleVersionChange = async (commitCID: string) => {\n    const docID = DocID.fromString(documentID);\n    let newDocID;\n\n    if (commitCID === docID.commit?.toString()) {\n      newDocID = docID;\n      setSelectedCommit(newDocID.commit);\n    } else {\n      newDocID = DocID.fromOther(docID, commitCID);\n      setSelectedCommit(commitCID);\n    }\n    setLoading(true)\n    const d = await window.ceramic?.loadDocument(newDocID);\n    if (d) {\n      setDirtyJSON(undefined);\n      setCurrentDocument(d);\n      setCurrentDocID(newDocID.toString())\n      if (documentEditor) {\n        documentEditor.setValue(JSON.stringify(d.state.next?.content || d.state.content, null, 4));\n      }\n      if (d.state.metadata.schema) {\n        handleSchemaDocIDChange(d.state.metadata.schema);\n      } else {\n        setCurrentSchema(undefined);\n      }\n    }\n    setLoading(false)\n  };\n\n  const handleSchemaCommitChange = async (commit: any) => {\n    setSelectedSchemaCommit(commit);\n  };\n\n  const handleSave = async () => {\n    const confirm = window.confirm(\"Are you sure you want to save?\");\n\n    if (!window.did) {\n      return;\n    }\n\n    if (!confirm) {\n      return;\n    }\n\n    let schemaDocIDLockedToCommit;\n    if (currentSchemaDocID) {\n      schemaDocIDLockedToCommit = DocID.fromOther(currentSchemaDocID, selectedSchemaCommit.cid.toString()).toString();\n      console.log(schemaDocIDLockedToCommit);\n    }\n\n    setLoading(true)\n    if (!documentID) {\n      try {\n        const newDocument = await window.ceramic?.createDocument(\"tile\", {\n          content: JSON.parse(dirtyJSON || \"\"),\n          metadata: {\n            schema: schemaDocIDLockedToCommit,\n            controllers: [window.did.id],\n          }\n        })\n        if (newDocument) {\n          setDirtyJSON(undefined);\n          history.push(\"/\" + newDocument.id.toString())\n        }\n        setLoading(false);\n      } catch (e) {\n        setLoading(false);\n        alert(e.message);\n      }\n      return;\n    }\n\n    if (props.authenticated && currentDocument && currentDocID) {\n      try {\n        const update: { [k: string]: any } = {};\n\n        if (dirtyJSON) {\n          setDirtyJSON(undefined);\n          update.content = JSON.parse(dirtyJSON || \"\");\n        }\n\n        if (currentDocument.metadata.schema !== schemaDocIDLockedToCommit) {\n          update.metadata = {\n            schema: schemaDocIDLockedToCommit,\n            controllers: [window.did.id]\n          };\n        }\n\n        setCurrentDocument(undefined);\n        await currentDocument.change(update)\n        loadDocument(documentID, true, true);\n      } catch (e) {\n        alert(e.message);\n      }\n    }\n  };\n\n  const shouldShowSave = () => {\n    const isAuthenticated = props.authenticated;\n    if (!isAuthenticated) { return false; }\n\n    const isController = window.did && currentDocumentStateJSON?.metadata.controllers.includes(window.did?.id);\n    const documentIsNew = !documentID;\n\n    const canEdit = isController || documentIsNew;\n\n    if (!canEdit) { return false; }\n    /* const currentDoc = currentDocument.state.content;\n     * const currentDocNext = currentDocument */\n    const docHasChanged = dirtyJSON && dirtyJSON !== JSON.stringify(currentDocumentStateJSON?.next?.content || currentDocumentStateJSON?.content, null, 4);\n    if (docHasChanged) { return true; }\n\n    if (!currentSchema) { return false; }\n    const currentDocSchema = currentDocument?.metadata?.schema;\n    if (currentDocSchema && currentSchemaDocID) {\n      const currentDocSchemaDocID = DocID.fromString(currentDocSchema);\n\n      const currentSchemaDocIDLockedToCommit = DocID.fromOther(currentSchemaDocID, selectedSchemaCommit.cid.toString());\n\n      if (currentDocSchemaDocID.equals(currentSchemaDocIDLockedToCommit) === false) {\n        return true;\n      }\n    }\n\n    /* const docHasSchema = currentDocumentStateJSON?.metadata.schema;\n     * if (!docHasSchema && currentSchemaDocID) {\n     *   return\n     * }\n\n     * if (docHasSchema) {\n     *   currentSchemaDocID !== currentDocumentStateJSON?.metadata.schema.replace(\"ceramic://\");\n     * }\n\n     * const schemaChanged = currentSchemaDocID !== currentDocumentStateJSON?.metadata.schema.replace(\"ceramic://\");\n     * console.log(schemaChanged);\n     * debugger; // eslint-disable-line */\n  };\n\n  const isSelectedCommit = (commit: any, selected: any): boolean => {\n    if (!selected || !commit.cid || !selected.cid) {\n      return false;\n    }\n    return commit.cid.toString() === selected.cid.toString();\n  };\n\n  const ELEMENT_MAP: { [viewId: string]: (id: string | number, path: MosaicBranch[]) => JSX.Element } = {\n    schema: (id, path) => (\n      <MosaicWindow<ViewId> path={path} title={`Schema`} >\n        <CustomEditor\n          editorDidMount={(editor: any) => {\n            setSchemaEditor(editor)\n          }}\n          value={(currentSchema && currentSchema.state && currentSchema.state.content && JSON.stringify(currentSchema.state.content, null, 4)) || \"\"}\n        />\n      </MosaicWindow>\n    ),\n    document: (id, path) => (\n      <MosaicWindow<ViewId> path={path} title={\"Document\"} toolbarControls={[\n        shouldShowSave() && <Button variant=\"contained\" color=\"secondary\" style={{ height: \"30px\", marginRight: \"10px\" }} startIcon={<Save />} onClick={handleSave}>Save</Button>,\n        loading && <CircularProgress size=\"20\" style={{ marginTop: \"5px\", marginRight: \"10px\" }} variant=\"indeterminate\"></CircularProgress>,\n        currentDocumentStateJSON && currentDocumentStateJSON.next && <StatusPill title=\"The 'next' property will contain the latest updates of the document before the've been anchored.\">NEXT</StatusPill>,\n        currentDocumentStateJSON && <StatusPill title=\"Anchor Status\" style={{ background: anchorStatusMapToColor[currentDocumentStateJSON.anchorStatus] }}>{currentDocumentStateJSON.anchorStatus}</StatusPill>,\n        (!documentID || (window.did && currentDocumentStateJSON?.metadata.controllers.includes(window.did?.id))) ? <Tooltip title=\"Document Editable\"><EditIcon fontSize=\"small\" style={{ color: \"#a7b6c2\", marginTop: \"4px\", marginRight: \"7px\", marginLeft: \"15px\" }} /></Tooltip> : undefined,\n        ...DEFAULT_CONTROLS_WITHOUT_CREATION\n      ]}>\n        <CustomEditor\n          value={(currentDocumentStateJSON && JSON.stringify(currentDocumentStateJSON?.next?.content || currentDocumentStateJSON.content, null, 4))}\n          editorDidMount={(editor: any) => {\n            setDocumentEditor(editor)\n          }}\n          schema={currentSchemaStateJSON?.content}\n          onChange={(value: any) => {\n            setDirtyJSON(value);\n          }}\n          editorOptions={{\n            readOnly: (props.authenticated && (!documentID || (window.did && currentDocumentStateJSON?.metadata.controllers.includes(window.did?.id)))) ? false : true\n          }}\n        />\n      </MosaicWindow>\n    ),\n    state: (id, path) => {\n      return (\n        <MosaicWindow<ViewId> path={path} title={\"State\"}>\n          <CustomEditor\n            value={JSON.stringify(currentDocumentStateJSON, null, 4) || \"\"}\n          />\n        </MosaicWindow>\n      )\n    },\n    commits: (id, path) => (\n      <MosaicWindow<ViewId> path={path} title={\"Commits\"}>\n        <CustomEditor\n          value={(currentCommits && JSON.stringify(commitsToJSON(currentCommits), null, 4)) || \"\"}\n        />\n      </MosaicWindow>\n    ),\n    versions: (id, path) => (\n      <MosaicWindow<ViewId> path={path} title={\"Commit History\"}>\n        <List style={{ height: \"100%\", overflow: \"auto\" }}>\n          {currentCommits && currentCommits.slice().reverse().map((commit, index) => (\n            <ListItem button selected={isSelectedCommit(commit, { cid: selectedCommit })} onClick={() => handleVersionChange(commit.cid)}>\n              <ListItemText>\n                <Typography color={index === 0 ? \"secondary\" : \"textSecondary\"} style={{ fontSize: \"11px\" }}>\n                  {commit.cid} {index === 0 ? \"(latest)\" : null}\n                </Typography>\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n      </MosaicWindow>\n    ),\n    schemaPicker: (id, path) => (\n      <MosaicWindow<ViewId> path={path} title={\"Schema Commit Picker\"}>\n        <Paper style={{\n          background: \"rgba(0, 0, 0, 0.2)\",\n          padding: \"0px 3px 0px 1px\",\n          margin: \"3px\"\n        }} elevation={0}>\n          <InputBase placeholder=\"Enter Document ID\" value={currentSchemaDocID} style={{ paddingLeft: \"5px\" }} fullWidth onChange={(ev) => handleSchemaDocIDChange(ev.target.value)} />\n        </Paper>\n        <List style={{ height: \"100%\", overflow: \"auto\" }}>\n          {currentSchema && currentSchema.state && currentSchema.state.log.slice().reverse().map((commit: any, index: any) => (\n            <ListItem button selected={isSelectedCommit(commit, selectedSchemaCommit)} onClick={() => handleSchemaCommitChange(commit)}>\n              <ListItemText>\n                <Typography color={index === 0 ? \"secondary\" : \"textSecondary\"} style={{ fontSize: \"11px\" }}>\n                  {commit.cid.toString()} {index === 0 ? \"(latest)\" : null}\n                </Typography>\n              </ListItemText>\n            </ListItem>\n          ))}\n        </List>\n      </MosaicWindow>\n    )\n  };\n\n  const updateCommitList = async (docID: string, selectLatest = false) => {\n    const l = await window.ceramic?.loadDocumentCommits(docID);\n    if (l) {\n      if (!selectedCommit || selectLatest) {\n        setSelectedCommit(l[l.length - 1]);\n      }\n      setCurrentCommits(l);\n    } else {\n      setCurrentCommits([]);\n      setSelectedCommit(undefined);\n    }\n  };\n\n  const loadDocument = async (docid: string, populateCurrentCommits: boolean = true, force: boolean = false) => { //eslint-disable-line\n    if (!docid || docid === \"\") {\n      setCurrentSchema(undefined);\n      setCurrentDocument(undefined);\n      setCurrentCommits(undefined);\n      setDirtyJSON(undefined);\n      return;\n    }\n    try {\n      setLoading(true);\n\n      const d = await window.ceramic?.loadDocument(docid);\n      if (!d) {\n        alert(\"no document found\");\n        return;\n      }\n      // if same doc return early\n      if (!force && currentDocument && JSON.stringify(currentDocument.state.content) === JSON.stringify(d.state.content) && currentDocument.state.anchorStatus === d.state.anchorStatus && currentDocument.id.toString() === d.id.toString()) {\n        setLoading(false);\n        return;\n      }\n      setCurrentDocument(d);\n      if (documentEditor && documentEditor.getValue() !== JSON.stringify(d.state.next?.content || d.state.content, null, 4)) {\n        documentEditor.setValue(JSON.stringify(d.state.next?.content || d.state.content, null, 4));\n      }\n\n      const schema = d.metadata.schema;\n      if (schema) {\n        await handleSchemaDocIDChange(schema);\n      } else {\n        setCurrentSchema(undefined);\n      }\n\n      if (populateCurrentCommits) {\n        await updateCommitList(docid, true);\n        setSelectedCommit(d.commitId.commit);\n      }\n\n      setLoading(false);\n    } catch (e) {\n      setLoading(false);\n      //\n    }\n  };\n\n  useEffect(() => {\n    if (currentDocument && currentDocument.state) {\n      setCurrentDocumentStateJSON(stateToJSON(currentDocument.state))\n    }\n  }, [currentDocument]); //eslint-disable-line\n\n\n  useEffect(() => {\n    if (window.ceramic) {\n      setCurrentDocID(documentID);\n      loadDocument(documentID);\n    }\n  }, [documentID]); //eslint-disable-line\n\n  useEffect(() => {\n    if (currentSchemaStateJSON === undefined || currentSchemaStateJSON.content === undefined) {\n      if (schemaEditor) {\n        schemaEditor.setValue(\"\");\n      }\n      return\n    }\n    const schemaContentStr = JSON.stringify(currentSchemaStateJSON.content, null, 4);\n    if (schemaEditor && schemaEditor.getValue() !== schemaContentStr) {\n      schemaEditor.setValue(schemaContentStr);\n    }\n  }, [currentSchemaStateJSON, schemaEditor]);\n\n  useInterval(async () => {\n    if (!window.ceramic) {\n      return;\n    }\n\n    if (currentDocument === undefined || currentDocument.state === undefined) { return; }\n\n    const l = await window.ceramic?.loadDocumentCommits(documentID);\n    const currentLogs = currentDocument?.state?.log.map((log) => log.cid.toString());\n\n    const hasNew = l.reduce((newL, log) => {\n      if (currentLogs.indexOf(log.cid.toString()) === -1) {\n        return true;\n      }\n      return newL;\n    }, false);\n\n    if (hasNew) {\n      await updateCommitList(documentID);\n    }\n\n    if ((!dirtyJSON || dirtyJSON === JSON.stringify(currentDocumentStateJSON?.next?.content || currentDocumentStateJSON?.content, null, 4)) && currentDocID) {\n      loadDocument(currentDocID, false);\n    }\n  }, 10000);\n\n  return (\n    <Mosaic<string>\n      className={classNames(\"mosaic-blueprint-theme\", darkMode.value ? Classes.DARK : undefined)}\n      renderTile={(id, path) => {\n        return ELEMENT_MAP[id](id, path)\n      }}\n      onChange={(v) => {\n        if (v) {\n          setMosaicValue(v)\n        }\n      }}\n      value={mosaicValue}\n      initialValue={mosaicValue || {\n        direction: \"row\",\n        first: \"document\",\n        second: {\n          direction: \"column\",\n          splitPercentage: 80,\n          first: {\n            direction: \"column\",\n            splitPercentage: 50,\n            first: {\n              direction: \"column\",\n              first: \"versions\",\n              second: \"state\",\n              splitPercentage: 50\n            },\n            second: {\n              direction: \"column\",\n              splitPercentage: 50,\n              first: \"schemaPicker\",\n              second: \"schema\"\n            },\n          },\n          second: \"commits\"\n        },\n        splitPercentage: 70,\n      }}\n    />\n  );\n};\n\nexport default Inspect;\n","import React, { useEffect, useState } from 'react'\nimport { authenticate } from '../app'\nimport { MuiThemeProvider, CssBaseline } from \"@material-ui/core\"; //tslint:disable-line\nimport NavBar from '../components/NavBar';\nimport { lightTheme, darkTheme } from \"../themes/theme\";\nimport useDarkMode from \"use-dark-mode\";\nimport \"react-mosaic-component/react-mosaic-component.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\nimport * as monaco from \"monaco-editor\";\nimport Inspect from '../pages/Inspect';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nconst MyApp: React.FC = () => {\n  const darkMode = useDarkMode();\n  const theme = darkMode.value ? darkTheme : lightTheme;\n  const [authenticated, setAuthenticated] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n  const [profile, setProfile] = useState<any>();\n\n  const handleClick = () => {\n    setConnecting(true);\n    authenticate().then(async (did: string) => {\n      setConnecting(false);\n      setAuthenticated(true);\n      if (window.idx) {\n        const profile = await window.idx.get(\"basicProfile\", did);\n        setProfile(profile);\n      }\n    }).catch((e) => {\n      setConnecting(false);\n      console.log(\"error\", e);\n    });\n  }\n\n  useEffect(() => {\n    monaco.editor.setTheme(darkMode.value ? \"vs-dark\" : \"vs\");\n  }, [darkMode.value])\n\n  return (\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Switch>\n          <Route path=\"/:documentID\">\n            <NavBar\n              authenticated={authenticated}\n              connecting={connecting}\n              onClick={handleClick}\n              onDarkModeToggle={darkMode.toggle}\n              darkMode={darkMode.value}\n              profile={profile}\n            />\n            <Inspect authenticated={authenticated} />\n          </Route>\n          <Route path=\"/\">\n            <NavBar\n              connecting={connecting}\n              authenticated={authenticated}\n              onClick={handleClick}\n              onDarkModeToggle={darkMode.toggle}\n              darkMode={darkMode.value}\n              profile={profile}\n            />\n            <Inspect authenticated={authenticated} />\n          </Route>\n        </Switch>\n      </MuiThemeProvider>\n    </Router>\n  )\n}\n\nexport default MyApp\n","import ReactDOM from \"react-dom\"\nimport React from \"react\"\nimport MyApp from \"./containers/MyApp\"\nimport \"./index.css\";\n\nReactDOM.render(<MyApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}